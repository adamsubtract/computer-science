
1. What is a hash table?
   Is a type of data structure that stores each value to a key.

2. What is hashing?

  Hashing is the process of converting a string into a number.

3. How does a hash table store data?

    It uses an array to store the data but each of the elements in the array are linked to
    a number called a key.

4. How are hash tables and objects different?

   Hash tables intend to use data that is similar and objects can hold datat

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
    - A list of pets and their unique names.
      Object
    - The name, age, and the birthday of your best friend.
      Hash table
    - The name and location of every company in a given city.
      Hash table
    - All of the books checked out from a library by a particular individual.
      Object
    - The primary and secondary phone numbers for a contact.
      Hash table

6. Build a system that allows a sales associate to enter a customer's name, address,
   and phone number into the system and look up customers using their phone numbers.
   Store this information in a hash table.

      var hash = (string, max) => {
     var hash = 0;
     for (var i = 0; i < string.length; i++) {
       hash += string.charCodeAt(i);
     }
     return hash % max;
   };

   let HashTable = function() {

     let storage = [];
     const storageLimit = 100;

     this.add = function(key,value) {
       var index = hash(key, storageLimit);
       if (storage[index] === undefined) {
         storage[index] = [
           {
             key: key,
             value: value
           }
         ];
       } else {
         var inserted = false;
         for (var i = 0; i < storage[index].length; i++) {
           if (storage[index][i].key === key) {
             storage[index][i].value = value;
             inserted = true;
           }
         }
         if (inserted === false) {
           storage[index].push({key: key, value: value});
         }
       }
     };

     this.lookup = function(key) {
       var index = hash(key, storageLimit);
       if (storage[index] === undefined) {
         return undefined;
       } else {
         for (var i = 0; i < storage[index].length; i++) {
           if (storage[index][i].key === key) {
             return storage[index][i].value;
           }
         }
       }
     };

   };

   var ht = new HashTable();
   ht.add(99999,{name:'Joe', address:' 500 Tree St.'})
   ht.add(1000,{name:'John',address:'200 Toronto Ave.'});
   ht.add(5000,{name:'Mike',address:'354 Gerard St.'});


   console.log(ht.lookup(99999));
   console.log(ht.lookup(5000));
   console.log(ht.lookup(1000));


   7. Build a system that allows a store owner to track their store's inventory using
      a hash table for storage.

      var hash = (string,max) =>{
     var hash= 0
     for(var i=0; i<string.length;i++){
       hash += string.charCodeAt(i)
     }
     return hash % max;
   };

   let HashTable = function(){
    let storage = [];
    const storageLimit= 5;


    this.add = function(key, value) {
       var index = hash(key, storageLimit);
       if (storage[index] === undefined) {
         storage[index] = [
           {
             key: key,
             value: value
           }
         ];
       } else {
         var inserted = false;
         for (var i = 0; i < storage[index].length; i++) {
           if (storage[index][i].key === key) {
             storage[index][i].value = value;
             inserted = true;
           }
         }
         if (inserted === false) {
           storage[index].push({key: key, value: value});
         }
       }
     };

     this.search = function(key) {
       var index = hash(key, storageLimit);
       if (storage[index] === undefined) {
         return undefined;
       } else {
         for (var i = 0; i < storage[index].length; i++) {
           if (storage[index][i].key === key) {
             return storage[index][i].value;
           }
         }
       }
     };

   };


   var ht = new HashTable();
   ht.add('Fiction books',1000);
   ht.add('Horror books',500);
   ht.add('Comic books', 300);
   ht.add('Romance',210);

   console.log(ht.search('Comic books'));
   console.log(ht.search('Horror books'));
   console.log(ht.search('Fiction books'));
   console.log(ht.search('Romance'));


   8. Build a system that allows digital copies of newspapers to be entered and searched
      by publisher and publication date. Use hash tables to store the necessary data.

      //Hash Function
      let hash = (string, max)=> {
        var hash = 0;
        for(var i=0; i< string.length;i++){
          hash+= string.charCodeAt(i);
        }
        return hash % max;
      }

      class Newspaper {
        constructor() {
          this.storage = [];
          this.storageLimit = 60;
        }

        add(publisher, pubDate) {
          let key = publisher + pubDate;
          let index = hash(key, this.storageLimit);
          let data = {publisher: publisher, pubDate: pubDate};

          if (this.storage[index] === undefined) {
              this.storage[index] = [ ];
          }

          this.storage[index].push(data);
          }

        search(publisher, pubDate) {
          let key = publisher + pubDate;
          let index = hash(key, this.storageLimit);

          if (!this.storage[index]) { return 'No results were found for this search' }
            this.storage[index].forEach(entry => {
             if (entry.publisher === publisher && entry.pubDate === pubDate) {
              return entry;
            }
          })
          return result;
        }
      }


      let news = new Newspaper();
      news.add('Pragmatic Bookshelf', 2009);
      news.add('St.Martins', 1990);
      news.add('St.Martin',2008);
      news.add('Pragmatic Publications', 2006);
      news.add('Oxford', 2018);

      console.log(news.search('Pragmatic Bookshelf', 2009));
      console.log(news.search('St.Martins', 1990));
      console.log(news.search('Pragmatic Bookshelf', 2009));
      console.log(news.search('Pragmatic Publications', 2006));
      console.log(news.search('humma'));
